****************************************************************
*	               FEEDBACK PORTAL: WEB APP                *
*	               ------------------------                *
*	           README FILE: BACKGROUND AND HOWTO           *
*		   ---------------------------------           *
*			     Shivam Garg                       *
*	                      14074017                         *
*		   shivam.gargcd.cse14@itbhu.ac.in             *
****************************************************************


ABOUT
-----
This web app is a feedback portal that allows:
- Students to fill their feedbacks for the courses in which
  they were enrolled.
- Instructors to view the feedbacks given to their courses.

FILLING:
The feedbacks are recorded in form of objective type questions,
arranged as an HTML form. Student can fill the feedback for each
course exactly once.

VIEWING:
Feedback is shown to the instructors in form of nicely colored
and labeled histograms, indicating student preferences for
each options of each question of the feedback form.
Instructors can also group the feedbacks according to the grades
obtained by the students. This will enable them to understand
how students from across the academic demography felt about the
course.

LOGIN:
Access to filling and viewing is restricted by a login page,
that demands student or instructor id and their assigned
passwords. Students log in to a page that enable them to fill
the feedback, and faculty to a page enabling them to view the
feedback.


STARTING THE APP
----------------
1. App requires django web framework.
2. cd to the mysite folder
3. Type: "python manage.py runserver" to run the server
4. Open the following link in a web-browser:
   	 "http://localhost:8000/feedback/"
5. Now the app starts.
6. For Database, use MySQL and initialize it with the database dump(db_dump.sql)
7. Some website screenshots are also included as .png


WORKING
-------
The app contains the following pages:

1. index.html:       The startin page, that displays a link to the
   	             login page. And the default page where unauthenticated
		     users trying to access intermediate pages are
		     redirected.
2. login.html: 	     This page asks for login details of the user
   	       	     and whether they are instructor or student.
3. student.html:     This page stores details of the logged in student
   		     and contains links to feedback filling forms of
		     the courses enrolled by the student.
4. instructor.html:  This page contains details of the logged in faculty
   		     and contains links to view feedback of the courses
		     the faculty teaches.
5. feed_fill.html:   The page contains a form to view and fill the feed-
   		     back, and a button to submit it.
6. feed_view.html:   This page displays the data filled in by the students
   		     for the feedback.


DATA FLOW
---------
1. Each .html page is a django template and contains placeholders to display
   context dictionary variables (if they exist) and either a link to other
   pages or a submit button to submit a form.
2. These requests then go to the correspoding function in the views.py.
3. Here authentication of the user is done using a
   session variable (set equal to the id of the user). This way only
   authenticated users (via login) can access intermediate pages.
4. All message passing is done via form elements (hidden and visible),
   urls, context dictionary and session variable.
5. Functions in views access and modify the database and renders the
   relevant template and pass it the required  variables in form of
   a context dictionary.
6. This is how the web app works, there is data and message passing,
   authentication at each step (except for index.html and login.html pages
   that are visible to all), database accesses and rendering of the
   django templates.
7. Django automates much of this task.
8. However database accesses are made using raw MySQL queries.
9. I have given the directory structure of the mysite folder of django web
   app below for quick reference.


DIRECTORY STRUCTURE
-------------------
FOLDERS
mysite     - the parent folder
feedback   - the app folder.
templates  - stores all the django templates
static     - stores static files such as .css and .js, and also images

FILES
.py   -	python files 
.pyc  -	compiled python files
*~    - emacs backup files
.html - HTML pages
.png  -	pictures and background
.js   - javascript files
.css  - styling files

TREE
mysite
├── feedback
│   ├── admin.py
│   ├── admin.pyc
│   ├── __init__.py
│   ├── __init__.pyc
│   ├── list_question
│   ├── list_questions.py
│   ├── list_questions.py~
│   ├── list_questions.pyc
│   ├── migrations
│   │   ├── __init__.py
│   │   └── __init__.pyc
│   ├── models.py
│   ├── models.py~
│   ├── models.pyc
│   ├── static
│   │   └── feedback
│   │       ├── images
│   │       │   ├── class.png
│   │       │   ├── skulls.png
│   │       │   └── tower.png
│   │       ├── jquery.js
│   │       ├── row_click.js
│   │       ├── style.css
│   │       └── style.css~
│   ├── templates
│   │   └── feedback
│   │       ├── feed_fill.html
│   │       ├── feed_fill.html~
│   │       ├── feed_view.html
│   │       ├── feed_view.html~
│   │       ├── index.html
│   │       ├── index.html~
│   │       ├── instructor.html
│   │       ├── instructor.html~
│   │       ├── login.html
│   │       ├── login.html~
│   │       ├── student.html
│   │       └── student.html~
│   ├── tests.py
│   ├── urls.py
│   ├── urls.py~
│   ├── urls.pyc
│   ├── views.py
│   ├── views.py~
│   └── views.pyc
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── __init__.pyc
│   ├── settings.py
│   ├── settings.py~
│   ├── settings.pyc
│   ├── urls.py
│   ├── urls.py~
│   ├── urls.pyc
│   ├── wsgi.py
│   └── wsgi.pyc
└── tst.py

8 directories, 51 files


                             ~~ END ~~